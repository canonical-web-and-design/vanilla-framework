//modular scale ratio
$ms-ratio: 1.3333333;
// $ms-ratio: 1.316074012952492460819218901796999055160068590205822176731;
//separate ratio so it can be used unitless (e.g. for line-height)
$sp-unit-ratio: .5;
$dense: true;
$sp-unit: 1rem * $sp-unit-ratio;
$px: .0625rem; // 1px expressed as rem; useful in calculations where sizes are defined in rems. 
$sp-xx-small: $sp-unit * .25 !default;
$sp-x-small: $sp-unit * .5 !default;
$sp-small: $sp-unit !default;
$sp-medium: $sp-unit * 2 !default;
$sp-large: $sp-unit * 3 !default;
$sp-x-large: $sp-unit * 4 !default;
$sp-xx-large: $sp-unit * 5 !default;
$sp-xxx-large: $sp-unit * 6 !default;
$sp-xxxx-large: $sp-unit * 8 !default;
$sp-xxxxx-large: $sp-unit * 12 !default;

// Maps containing values used to snap text at given font size to the nearest baseline.
// format: map name: $baselin-offset-at- followed by base unit (12px);
//   key name: pow followed by the power $ms-ratio has been raised to; 
//  (font-sizes are 1rem * $ms-ratio taken to powers 0 - 4)

$line-heights: (
  h1: 7 * $sp-unit,
  h2: 6 * $sp-unit,
  h3: 5 * $sp-unit,
  h4: 4 * $sp-unit,
  default-text: 3 * $sp-unit
);
$nudges--baseline-8: (
  pow4: .6rem,
  pow3: .6rem,
  pow2: .55rem,
  pow1: .45rem,
  pow0: .35rem
);

// space before element on desktop
$sp-before--desktop: (
  h1: 3 * $sp-unit,
  h2: 3 * $sp-unit,
  h3: 3 * $sp-unit,
  h4: 2 * $sp-unit,
  h5: 2 * $sp-unit,
  h6: 2 * $sp-unit,
  p: 2 * $sp-unit
);

// space after element on desktop
$sp-after--desktop: (
  h1: 3 * $sp-unit,
  h2: 3 * $sp-unit,
  h3: 3 * $sp-unit,
  h4: 3 * $sp-unit,
  h5: 3 * $sp-unit,
  h6: 3 * $sp-unit,
  p: 3 * $sp-unit,
  default-text: 1
);

//spacing values for specific purpouses. These will be the settings that turn vanilla regular into vanilla dense.
$sp-bordered-inner--top: map-get($nudges--baseline-8, pow0) - $px;
$sp-bordered-inner--bottom: $sp-bordered-inner--top;

$multi: 2;

// these are draft settings, precise values for dense and regular vanilla will be dialed in (and connected to a multiplier) later
$spv: (
  section: 8 * $sp-unit * $multi,
  outer: 4 * $sp-unit * $multi,
  inner: 1 * $sp-unit * $multi
);
