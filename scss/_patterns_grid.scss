@import 'settings';

@mixin vf-p-grid-modifications {
  @include deprecate('3.0.0', 'vf-p-grid-modifications mixin will be removed') {
    .row {
      width: 100%;
    }
  }
}

// CSS grid implementation of columns for all screens sizes
@mixin vf-grid-column($col) {
  @supports (display: grid) {
    grid-column-end: span #{$col};

    // reset flex box fallback styles
    margin-left: 0;
    width: auto;

    //nesting
    @if $col > 1 {
      & .row {
        grid-template-columns: repeat($col, minmax(0, 1fr));
      }
    }
  }
}

@mixin vf-p-grid {
  %span-full-grid-on-mobile {
    @media (max-width: $threshold-4-6-col) {
      grid-column: 1 / span $grid-columns-small;
    }
  }

  %span-full-grid-on-tablet {
    @media (min-width: $threshold-4-6-col) and (max-width: $threshold-6-12-col) {
      grid-column: 1 / span $grid-columns-medium;
    }
  }

  %span-full-grid-on-desktop {
    @media (min-width: $threshold-6-12-col) {
      grid-column: 1 / span $grid-columns;
    }
  }

  // FIXME: this should be removed from framework SCSS
  // (see https://github.com/canonical-web-and-design/vanilla-framework/issues/3199)
  .grid-demo [class*='#{$grid-column-prefix}'] {
    background: transparentize($color-negative, 0.9);
    margin-bottom: $spv-outer--small;
  }

  %display-block {
    // make columns explicitly display:block; the use of a placeholder is to ensure the rule appears only once in the compiled css
    display: block;
  }

  .row {
    @extend %vf-row;
  }

  // mobile grid
  @media (max-width: $threshold-4-6-col) {
    @for $i from $grid-columns-small through 1 {
      .row .#{$grid-small-col-prefix}#{$i} {
        @include vf-grid-column($i);

        width: 100%;
      }
    }
  }

  // tablet grid
  @media (min-width: $threshold-4-6-col) and (max-width: $threshold-6-12-col) {
    @for $i from $grid-columns-medium through 1 {
      .row .#{$grid-medium-col-prefix}#{$i} {
        @include vf-grid-column($i);

        width: 100%;
      }
    }
  }

  // desktop grid
  @media (min-width: $threshold-6-12-col) {
    @for $i from $grid-columns through 1 {
      // set col-* to span respective number of columns on desktop
      .row .#{$grid-large-col-prefix}#{$i} {
        // on large screens provide flex box column implementation for IE
        // on smaller screens let them display full width one under another
        @include vf-grid-flex-column($i);
        @include vf-grid-column($i);
      }
    }
  }

  // span full grid on other breakpoints; (to match block level element behaviour)
  @for $i from 1 through $grid-columns-small {
    .row .#{$grid-small-col-prefix}#{$i} {
      @extend %span-full-grid-on-tablet;
      @extend %span-full-grid-on-desktop;
      @extend %display-block;
    }
  }

  @for $i from 1 through $grid-columns-medium {
    .row .#{$grid-medium-col-prefix}#{$i} {
      @extend %span-full-grid-on-mobile;
      @extend %span-full-grid-on-desktop;
      @extend %display-block;
    }
  }

  @for $i from 1 through $grid-columns {
    .row .#{$grid-large-col-prefix}#{$i} {
      @extend %span-full-grid-on-mobile;
      @extend %span-full-grid-on-tablet;
      @extend %display-block;
    }
  }

  // column reordering
  $offsets: (
    (small, 0, $threshold-4-6-col, $grid-columns-small - 1),
    (medium, $threshold-4-6-col, $threshold-6-12-col, $grid-columns-medium - 1),
    (large, $threshold-6-12-col, -1, $grid-columns - 1)
  );

  @each $label, $breakpoint-min, $breakpoint-max, $col-count in $offsets {
    $query: null;
    @if $breakpoint-min == 0 {
      $query: '(max-width: #{$breakpoint-max})';
    } @else if $breakpoint-max == -1 {
      $query: '(min-width: #{$breakpoint-min})';
    } @else {
      $query: '(min-width: #{$breakpoint-min}) and (max-width: #{$breakpoint-max})';
    }

    @media #{$query} {
      @for $i from 1 through $col-count {
        .row [class*='#{$grid-column-prefix}'].#{$grid-column-prefix}start-#{$label}-#{$i},
        .row-x-large [class*='#{$grid-column-prefix}'].#{$grid-column-prefix}start-#{$label}-#{$i} {
          grid-column-start: #{$i};
        }

        .#{$grid-column-prefix}order-#{$label}-#{$i} {
          order: #{$i};
        }
      }
    }
  }

  // variants

  .row.is-bordered {
    position: relative;

    &::before {
      background: $color-mid-light;
      content: '';
      height: 1px;
      margin-bottom: calc(#{$spv-inner--scaleable} - 1px);
      position: absolute;

      @media (max-width: $threshold-4-6-col) {
        left: map-get($grid-margin-widths, small);
        right: map-get($grid-margin-widths, small);
      }

      @media (min-width: $threshold-4-6-col) and (max-width: $threshold-6-12-col) {
        left: map-get($grid-margin-widths, medium);
        right: map-get($grid-margin-widths, medium);
      }

      @media (min-width: $threshold-6-12-col) {
        left: map-get($grid-margin-widths, large);
        right: map-get($grid-margin-widths, large);
      }
    }
  }
}

@mixin vf-p-grid-breakout {
  %span-full-grid-on-mobile {
    @media (max-width: $threshold-4-6-col) {
      grid-column: 1 / span $grid-columns-small;
    }
  }

  %span-full-grid-on-tablet {
    @media (min-width: $threshold-4-6-col) and (max-width: $threshold-6-12-col) {
      grid-column: 1 / span $grid-columns-medium;
    }
  }

  %span-full-grid-on-desktop {
    @media (min-width: $threshold-6-12-col) {
      grid-column: 1 / span $grid-columns;
    }
  }

  %display-block {
    // make columns explicitly display:block; the use of a placeholder is to ensure the rule appears only once in the compiled css
    display: block;
  }

  .row-breakout {
    @media (min-width: $threshold-12-col-plus) {
      align-items: self-start;
      display: grid;
      grid-gap: 0 0;
      grid-template-columns: [full-start] minmax(10rem, 1fr) [main-start] minmax(0, $grid-max-width) [main-end] minmax(10rem, 1fr) [full-end];
      margin-left: auto;
      margin-right: auto;
      max-width: 120rem;
    }

    &__full {
      // @media (max-width: $threshold-12-col-plus) {
      //   @supports (display: grid) {
      //     display: grid;
      //     grid-template-rows: auto;
      //     margin-left: auto;
      //     margin-right: auto;
      //     max-width: $grid-max-width;

      //     [class*='#{$grid-column-prefix}'] {
      //       grid-column-start: auto;
      //     }
      //   }
      // }

      // set static gutter width per breakpoint
      @media (max-width: $breakpoint-x-small) {
        @supports (display: grid) {
          display: grid;
          grid-gap: 0 map-get($grid-gutter-widths, small);
          grid-template-columns: repeat($grid-columns-small, minmax(0, 1fr));
          padding-left: map-get($grid-margin-widths, small);
          padding-right: map-get($grid-margin-widths, small);

          // stylelint-disable-next-line max-nesting-depth
          & > * {
            grid-column-end: span $grid-columns-small;
          }
        }
      }

      // @media (min-width: $breakpoint-x-small) and (max-width: $threshold-4-6-col) {
      //   @supports (display: grid) {
      //     display: grid;
      //     grid-gap: 0 map-get($grid-gutter-widths, small);
      //     grid-template-columns: repeat($grid-columns-small, minmax(0, 1fr));
      //     padding-left: map-get($grid-margin-widths, small);
      //     padding-right: map-get($grid-margin-widths, small);

      //     // stylelint-disable-next-line max-nesting-depth
      //     & > * {
      //       grid-column-end: span $grid-columns-small;
      //     }
      //   }
      // }

      // @media (min-width: $threshold-4-6-col) and (max-width: $threshold-6-12-col) {
      //   @supports (display: grid) {
      //     display: grid;
      //     grid-gap: 0 map-get($grid-gutter-widths, medium);
      //     grid-template-columns: repeat($grid-columns-medium, minmax(0, 1fr));
      //     padding-left: map-get($grid-margin-widths, medium);
      //     padding-right: map-get($grid-margin-widths, medium);

      //     // stylelint-disable-next-line max-nesting-depth
      //     & > * {
      //       grid-column-end: span $grid-columns-medium;
      //     }
      //   }
      // }

      // @media (min-width: $threshold-6-12-col) and (max-width: $threshold-12-col-plus) {
      //   @supports (display: grid) {
      //     display: grid;
      //     grid-gap: 0 map-get($grid-gutter-widths, large);
      //     grid-template-columns: repeat($grid-columns, minmax(0, 1fr));
      //     padding-left: map-get($grid-margin-widths, large);
      //     padding-right: map-get($grid-margin-widths, large);

      //     // stylelint-disable-next-line max-nesting-depth
      //     & > * {
      //       grid-column-end: span $grid-columns;
      //     }
      //   }
      // }

      @media (min-width: $threshold-12-col-plus) {
        @supports (display: grid) {
          display: grid;
          grid-column: full;
          grid-gap: 0 0;
          grid-template-columns: inherit;
        }
      }
    }

    &__main {
      @supports (display: grid) {
        display: inherit;
        grid-column-start: auto;
        grid-gap: 0 map-get($grid-gutter-widths, large);
        grid-row-start: auto;

        @media (max-width: $breakpoint-x-small) {
          grid-column-end: span $grid-columns-x-small;
          grid-template-columns: repeat($grid-columns-x-small, minmax(0, 1fr));
        }

        @media (min-width: $breakpoint-x-small) and (max-width: $threshold-4-6-col) {
          grid-column-end: span $grid-columns-small;
          grid-template-columns: repeat($grid-columns-small, minmax(0, 1fr));
        }

        @media (min-width: $threshold-4-6-col) and (max-width: $threshold-6-12-col) {
          grid-column-end: span $grid-columns-medium - $aside-columns-medium;
          grid-template-columns: repeat($grid-columns-medium - $aside-columns-medium, minmax(0, 1fr));
        }

        @media (min-width: $threshold-6-12-col) and (max-width: $threshold-12-col-plus) {
          grid-column-end: span $grid-columns - $aside-columns-large;
          grid-template-columns: repeat($grid-columns - $aside-columns-large, minmax(0, 1fr));
        }

        @media (min-width: $threshold-12-col-plus) {
          grid-column: auto / span 2;
          grid-template-columns: repeat($grid-breakut-columns-x-large, minmax(0, 1fr));
          padding-left: map-get($grid-margin-widths, large);
          padding-right: map-get($grid-margin-widths, large);

          // stylelint-disable-next-line max-nesting-depth
          & > * {
            grid-column: auto / span $grid-breakut-columns-x-large;
          }
        }
      }
    }

    &__aside {
      @supports (display: grid) {
        grid-column-start: auto;
        grid-row: 1 / 100;

        @media (max-width: $threshold-4-6-col) {
          grid-column-end: span $aside-columns-x-small;
        }

        @media (min-width: $breakpoint-x-small) and (max-width: $threshold-4-6-col) {
          grid-column-end: span $aside-columns-small;
        }

        @media (min-width: $threshold-4-6-col) and (max-width: $threshold-6-12-col) {
          grid-column-end: span $aside-columns-medium;
        }

        @media (min-width: $threshold-6-12-col) and (max-width: $threshold-12-col-plus) {
          grid-column-end: span $aside-columns-large;
        }

        @media (min-width: $threshold-12-col-plus) {
          display: grid;
          grid-column-end: span 1;
        }
      }
    }
  }

  // mobile grid
  @media (max-width: $breakpoint-x-small) {
    @for $i from $grid-columns-x-small through 1 {
      .row-breakout__main .#{$grid-x-small-col-prefix}#{$i} {
        @include vf-grid-column($i);

        width: 100%;
      }
    }
  }

  // small tablet grid
  @media (min-width: $breakpoint-x-small) and (max-width: $threshold-4-6-col) {
    @for $i from $grid-columns-small through 1 {
      .row-breakout__main .#{$grid-small-col-prefix}#{$i} {
        @include vf-grid-column($i);

        width: 100%;
      }
    }
  }

  // regular tablet grid
  @media (min-width: $threshold-4-6-col) and (max-width: $threshold-6-12-col) {
    @for $i from $grid-columns-medium through 1 {
      .row-breakout__main .#{$grid-medium-col-prefix}#{$i} {
        @include vf-grid-column($i);

        width: 100%;
      }
    }
  }

  // desktop grid
  @media (min-width: $threshold-6-12-col) and (max-width: $threshold-12-col-plus) {
    @for $i from $grid-columns through 1 {
      // set col-* to span respective number of columns on desktop
      .row-breakout__main .#{$grid-large-col-prefix}#{$i} {
        // on large screens provide flex box column implementation for IE
        // on smaller screens let them display full width one under another
        @include vf-grid-flex-column($i);
        @include vf-grid-column($i);
      }
    }
  }

  // desktop x-large grid
  @media (min-width: $threshold-12-col-plus) {
    @for $i from $grid-breakut-columns-x-large through 1 {
      // set col-* to span respective number of columns on desktop
      .row-breakout__main .#{$grid-breakut-x-large-col-prefix}#{$i} {
        // on large screens provide flex box column implementation for IE
        // on smaller screens let them display full width one under another
        @include vf-grid-flex-column($i);
        @include vf-grid-column($i);
      }
    }
  }
  // span full grid on other breakpoints; (to match block level element behaviour)
  @for $i from 1 through $grid-columns-small {
    .row-breakout__main .#{$grid-small-col-prefix}#{$i} {
      @extend %span-full-grid-on-tablet;
      @extend %span-full-grid-on-desktop;
      @extend %display-block;
    }
  }

  @for $i from 1 through $grid-columns-medium {
    .row-breakout__main .#{$grid-medium-col-prefix}#{$i} {
      @extend %span-full-grid-on-mobile;
      @extend %span-full-grid-on-desktop;
      @extend %display-block;
    }
  }

  @for $i from 1 through $grid-columns {
    .row-breakout__main .#{$grid-large-col-prefix}#{$i} {
      @extend %span-full-grid-on-mobile;
      @extend %span-full-grid-on-tablet;
      @extend %display-block;
    }
  }

  // // column reordering
  // $offsets: (
  //   (small, 0, $threshold-4-6-col, $grid-columns-small - 1),
  //   (medium, $threshold-4-6-col, $threshold-6-12-col, $grid-columns-medium - 1),
  //   (large, $threshold-6-12-col, -1, $grid-columns - 1),
  //   (x-large, $threshold-12-col-plus, -1, $grid-columns--16 - 1)
  // );

  // @each $label, $breakpoint-min, $breakpoint-max, $col-count in $offsets {
  //   $query: null;
  //   @if $breakpoint-min == 0 {
  //     $query: '(max-width: #{$breakpoint-max})';
  //   } @else if $breakpoint-max == -1 {
  //     $query: '(min-width: #{$breakpoint-min})';
  //   } @else {
  //     $query: '(min-width: #{$breakpoint-min}) and (max-width: #{$breakpoint-max})';
  //   }

  //   @media #{$query} {
  //     @for $i from 1 through $col-count {
  //       .row-breakout__full [class*='#{$grid-column-prefix}'].#{$grid-column-prefix}start-#{$label}-#{$i} {
  //         grid-column-start: #{$i};
  //       }

  //       .#{$grid-column-prefix}order-#{$label}-#{$i} {
  //         order: #{$i};
  //       }
  //     }
  //   }
  // }
}
