@import 'settings';

// This file imports Shelves Grid framework
// http://shelvesgrid.org/
// The settings below can be changed in _settings_grid.scss
$shelves-max-width: $grid-max-width;
$shelves-columns: $grid-columns;
$shelves-margin: $grid-margin-width;
$shelves-gutter: $grid-gutter-width;
$shelves-tablet-breakpoint: $breakpoint-medium;
$shelves-mobile-breakpoint: $breakpoint-small;
$shelves-column-name: $grid-col-name;

@import 'grid/shelves-grid';

@mixin vf-p-grid-modifications {
  .row {
    width: 100%;
  }

  // Demo helper
  [grid-demo] [class*='#{$grid-col-name}-'] {
    background: $color-mid-light;
    margin-bottom: $spv-inner--small;
  }

  [grid-outline] [class*='#{$grid-col-name}-'] {
    outline: 1px solid $color-x-light;
    padding: $spv-inner--small $sph-inner--small;
  }
}

@mixin vf-p-css-grid {
  %row-reset {
    margin-left: 0;
    margin-right: 0;
    max-width: $grid-max-width;
    padding-left: 0;
    padding-right: 0;
  }

  %span-full-grid-on-mobile {
    @media (max-width: $breakpoint-medium) {
      grid-column: 1 / span $grid-columns-mobile;
    }
  }

  %span-full-grid-on-tablet {
    @media (min-width: $breakpoint-medium) and (max-width: $breakpoint-large) {
      grid-column: 1 / span $grid-columns-tablet;
    }
  }

  %span-full-grid-on-desktop {
    @media (min-width: $breakpoint-large) {
      grid-column: 1 / span $grid-columns;
    }
  }

  [css-grid-demo] [class*='#{$grid-column-prefix}'] {
    background: transparentize($color-negative, 0.9);
    margin-bottom: $spv-outer--small;
  }

  .row {
    display: grid;
    grid-template-rows: auto;
    margin-left: auto;
    margin-right: auto;
    max-width: $grid-max-width;
    padding-left: $grid-margin-width;
    padding-right: $grid-margin-width;

    & & {
      @extend %row-reset;
    }

    [class*='#{$grid-column-prefix}'] {
      grid-column-start: auto;
    }

    // set static gutter width per breakpoint
    @media (max-width: $breakpoint-small) {
      grid-gap: 0 map-get($grid-gutter-widths, small);
      grid-template-columns: repeat($grid-columns-mobile, minmax(0, 1fr));

      * {
        grid-column-end: span $grid-columns-mobile;
      }
    }

    @media (min-width: $breakpoint-small) and (max-width: $breakpoint-medium) {
      grid-gap: 0 map-get($grid-gutter-widths, medium);
      grid-template-columns: repeat($grid-columns-tablet, minmax(0, 1fr));

      * {
        grid-column-end: span $grid-columns-tablet;
      }
    }

    @media (min-width: $breakpoint-medium) {
      grid-gap: 0 map-get($grid-gutter-widths, large);
      grid-template-columns: repeat($grid-columns, minmax(0, 1fr));

      * {
        grid-column-end: span $grid-columns;
      }
    }
  }

  // mobile grid
  @media (max-width: $breakpoint-small) {
    @for $i from 1 through $grid-columns-mobile {
      .#{$grid-small-col-prefix}#{$i} {
        grid-column-end: span #{$i};

        //nesting
        @if $i > 1 {
          & > .row {
            grid-template-columns: repeat($i, minmax(0, 1fr));
          }
        }
      }
    }
  }

  // tablet grid
  @media (min-width: $breakpoint-small) and (max-width: $breakpoint-medium) {
    @for $i from 1 through $grid-columns-tablet {
      .#{$grid-col-medium-prefix}#{$i} {
        grid-column-end: span #{$i};

        //nesting
        @if $i > 1 {
          & > .row {
            grid-template-columns: repeat($i, minmax(0, 1fr));
          }
        }
      }
    }
  }

  // desktop grid
  @media (min-width: $breakpoint-medium) {
    @for $i from $grid-columns through 1 {
      // set col-* to span respective number of columns on desktop
      .#{$grid-desktop-col-prefix}#{$i} {
        grid-column-end: span #{$i};

        //nesting
        @if $i > 1 {
          & > .row {
            grid-template-columns: repeat($i, minmax(0, 1fr));
          }
        }
      }
    }
  }

  // span full grid on other breakpoints; (to match block level element behaviour)
  @for $i from 1 through $grid-columns-mobile {
    .#{$grid-small-col-prefix}#{$i} {
      @extend %span-full-grid-on-tablet;
      @extend %span-full-grid-on-desktop;
    }
  }

  @for $i from 1 through $grid-columns-tablet {
    .#{$grid-col-medium-prefix}#{$i} {
      @extend %span-full-grid-on-mobile;
      @extend %span-full-grid-on-desktop;
    }
  }

  @for $i from 1 through $grid-columns {
    .#{$grid-desktop-col-prefix}#{$i} {
      @extend %span-full-grid-on-mobile;
      @extend %span-full-grid-on-tablet;
    }
  }

  // column reordering
  $offsets: (
    (small, 0, $breakpoint-small, $grid-columns-mobile - 1),
    (medium, $breakpoint-small, $breakpoint-medium, $grid-columns-tablet - 1),
    (large, $breakpoint-medium, -1, $grid-columns - 1)
  );

  @each $label, $breakpoint-min, $breakpoint-max, $col-count in $offsets {
    $query: null;
    @if $breakpoint-min == 0 {
      $query: '(max-width: #{$breakpoint-max})';
    } @else if $breakpoint-max == -1 {
      $query: '(min-width: #{$breakpoint-min})';
    } @else {
      $query: '(min-width: #{$breakpoint-min}) and (max-width: #{$breakpoint-max})';
    }

    @media #{$query} {
      @for $i from 1 through $col-count {
        .row [class*='#{$grid-column-prefix}'].#{$grid-column-prefix}start-#{$label}-#{$i} {
          grid-column-start: #{$i};
        }

        .#{$grid-column-prefix}order-#{$label}-#{$i} {
          order: #{$i};
        }
      }
    }
  }
}
