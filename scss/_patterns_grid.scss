@import 'settings';

@mixin vf-p-grid-modifications {
  @include deprecate('3.0.0', 'vf-p-grid-modifications mixin will be removed') {
    .row {
      width: 100%;
    }
  }
}

// CSS grid implementation of columns for all screens sizes
@mixin vf-grid-column($col) {
  @supports (display: grid) {
    grid-column-end: span #{$col};

    // reset flex box fallback styles
    margin-left: 0;
    width: auto;

    //nesting
    @if $col > 1 {
      & .row {
        grid-template-columns: repeat($col, minmax(0, 1fr));
      }
    }
  }
}

@mixin vf-p-grid {
  // FIXME: this should be removed from framework SCSS
  // (see https://github.com/canonical-web-and-design/vanilla-framework/issues/3199)
  .grid-demo [class*='#{$grid-column-prefix}'] {
    background: transparentize($color-negative, 0.9);
    margin-bottom: $spv-outer--small;
  }

  .row {
    @extend %vf-row;
  }

  // mobile grid
  @media (max-width: $threshold-4-6-col) {
    @for $i from $grid-columns-small through 1 {
      .row .#{$grid-small-col-prefix}#{$i} {
        @include vf-grid-column($i);

        width: 100%;
      }
    }
  }

  // tablet grid
  @media (min-width: $threshold-4-6-col) and (max-width: $threshold-6-12-col) {
    @for $i from $grid-columns-medium through 1 {
      .row .#{$grid-medium-col-prefix}#{$i} {
        @include vf-grid-column($i);

        width: 100%;
      }
    }
  }

  // desktop grid
  @media (min-width: $threshold-6-12-col) {
    @for $i from $grid-columns through 1 {
      // set col-* to span respective number of columns on desktop
      .row .#{$grid-large-col-prefix}#{$i} {
        // on large screens provide flex box column implementation for IE
        // on smaller screens let them display full width one under another
        @include vf-grid-flex-column($i);
        @include vf-grid-column($i);
      }
    }
  }

  // span full grid on other breakpoints; (to match block level element behaviour)
  @for $i from 1 through $grid-columns-small {
    .row .#{$grid-small-col-prefix}#{$i} {
      @extend %span-full-grid-on-tablet;
      @extend %span-full-grid-on-desktop;
      @extend %display-block;
    }
  }

  @for $i from 1 through $grid-columns-medium {
    .row .#{$grid-medium-col-prefix}#{$i} {
      @extend %span-full-grid-on-mobile;
      @extend %span-full-grid-on-desktop;
      @extend %display-block;
    }
  }

  @for $i from 1 through $grid-columns {
    .row .#{$grid-large-col-prefix}#{$i} {
      @extend %span-full-grid-on-mobile;
      @extend %span-full-grid-on-tablet;
      @extend %display-block;
    }
  }

  // column reordering
  $offsets: (
    (small, 0, $threshold-4-6-col, $grid-columns-small - 1),
    (medium, $threshold-4-6-col, $threshold-6-12-col, $grid-columns-medium - 1),
    (large, $threshold-6-12-col, -1, $grid-columns - 1)
  );

  @each $label, $breakpoint-min, $breakpoint-max, $col-count in $offsets {
    $query: null;
    @if $breakpoint-min == 0 {
      $query: '(max-width: #{$breakpoint-max})';
    } @else if $breakpoint-max == -1 {
      $query: '(min-width: #{$breakpoint-min})';
    } @else {
      $query: '(min-width: #{$breakpoint-min}) and (max-width: #{$breakpoint-max})';
    }

    @media #{$query} {
      @for $i from 1 through $col-count {
        .row [class*='#{$grid-column-prefix}'].#{$grid-column-prefix}start-#{$label}-#{$i} {
          grid-column-start: #{$i};
        }

        .#{$grid-column-prefix}order-#{$label}-#{$i} {
          order: #{$i};
        }
      }
    }
  }

  // variants

  .row.is-bordered {
    position: relative;

    &::before {
      background: $color-mid-light;
      content: '';
      height: 1px;
      margin-bottom: calc(#{$spv-inner--scaleable} - 1px);
      position: absolute;

      @media (max-width: $threshold-4-6-col) {
        left: map-get($grid-margin-widths, small);
        right: map-get($grid-margin-widths, small);
      }

      @media (min-width: $threshold-4-6-col) and (max-width: $threshold-6-12-col) {
        left: map-get($grid-margin-widths, medium);
        right: map-get($grid-margin-widths, medium);
      }

      @media (min-width: $threshold-6-12-col) {
        left: map-get($grid-margin-widths, large);
        right: map-get($grid-margin-widths, large);
      }
    }
  }
}

@mixin vf-l-fluid-breakout(
  $l-fluid-breakout-aside-width: $l-fluid-breakout-aside-width,
  $l-fluid-breakout-main-child-width: $l-fluid-breakout-main-child-width,
  $grid-gap: $sp-unit * 2,
  $suffix: ''
) {
  %l-fluid-breakout-ie11-fallback {
    display: flex;

    @media (max-width: $threshold-4-6-col) {
      flex-direction: column;
    }
  }

  %l-fluid-breakout__full-and-main-ie11-fallback {
    display: flex;
    flex-wrap: wrap;

    & > * {
      margin-left: 0.5 * $grid-gap;
      margin-right: 0.5 * $grid-gap;
    }

    @media (min-width: $l-fluid-breakout-3-col-threshold) {
      width: calc(100% - #{$l-fluid-breakout-aside-width});
      // stylelint-disable-next-line max-nesting-depth
      & > * {
        flex: 1 1 auto;
        width: $l-fluid-breakout-main-child-width;
      }
    }
  }

  %l-fluid-breakout__aside-ie-11-fallback {
    flex: 0 0 auto;
    justify-content: flex-start;

    @media (min-width: $l-fluid-breakout-3-col-threshold) {
      display: flex;
      flex: 1 1 auto;
      width: $l-fluid-breakout-aside-width;
    }

    @media (min-width: $threshold-4-6-col) and (max-width: $l-fluid-breakout-3-col-threshold) {
      padding-right: map-get($grid-margin-widths, large);
    }
  }

  .l-fluid-breakout#{$suffix} {
    @extend %l-fluid-breakout-ie11-fallback;

    @supports (display: grid) {
      grid-gap: 0 0;
    }

    @media (min-width: $breakpoint-large) {
      margin-left: auto;
      margin-right: auto;
      max-width: 2 * $l-fluid-breakout-aside-width + $l-fluid-breakout-max-width;

      @supports (display: grid) {
        display: grid;
        grid-template-columns:
          minmax($l-fluid-breakout-aside-width, 1fr)
          minmax(0, $l-fluid-breakout-max-width)
          minmax($l-fluid-breakout-aside-width, 1fr);
        grid-template-rows: auto;
      }
    }

    @media (max-width: $threshold-4-6-col) {
      padding-left: map-get($grid-margin-widths, small);
      padding-right: map-get($grid-margin-widths, small);
    }

    @media (min-width: $threshold-4-6-col) and (max-width: $threshold-6-12-col) {
      padding-left: map-get($grid-margin-widths, medium);
      padding-right: map-get($grid-margin-widths, medium);
    }

    @media (min-width: $threshold-6-12-col) and (max-width: $l-fluid-breakout-3-col-threshold) {
      padding-left: map-get($grid-margin-widths, large);
      padding-right: map-get($grid-margin-widths, large);
    }

    @media (min-width: $l-fluid-breakout-3-col-threshold) {
      padding-left: 0;
      padding-right: 0;

      @supports (display: grid) {
        grid-gap: 0 0;
      }
    }

    %l-fluid-breakout__main-and-full-common {
      @extend %l-fluid-breakout__full-and-main-ie11-fallback;

      @supports (display: grid) {
        display: grid;
        grid-gap: 0 $grid-gap;
        grid-row: 1;
        grid-template-columns: repeat(auto-fit, minmax($l-fluid-breakout-main-child-width, 1fr));
      }

      @media (min-width: $l-fluid-breakout-3-col-threshold) {
        padding-left: map-get($grid-margin-widths, large);
        padding-right: map-get($grid-margin-widths, large);
        width: 100%;
      }

      & > * {
        @supports (display: grid) {
          // overwrite fallback margins
          margin-left: 0;
          margin-right: 0;
        }
      }
    }

    .l-fluid-breakout__full {
      @extend %l-fluid-breakout__main-and-full-common;

      @media (min-width: $breakpoint-large) {
        // stylelint-disable-next-line max-nesting-depth
        @supports (display: grid) {
          grid-column: 1 / span 3;
        }
      }
    }

    .l-fluid-breakout__main {
      @extend %l-fluid-breakout__main-and-full-common;

      @media (min-width: $breakpoint-large) {
        @supports (display: grid) {
          grid-column: auto / span 2;

          // stylelint-disable-next-line max-nesting-depth
          &.no-aside {
            grid-column: 2 / span 2;
          }
        }
      }

      & > * {
        // stylelint-disable-next-line max-nesting-depth
        @media (min-width: $l-fluid-breakout-3-col-threshold) {
          // stylelint-disable-next-line max-nesting-depth
          @supports (display: grid) {
            grid-column: auto / auto;
            width: initial;
          }
        }
      }
    }

    %l-fluid-breakout__aside-common-properties {
      @extend %l-fluid-breakout__aside-ie-11-fallback;

      @media (min-width: $l-fluid-breakout-3-col-threshold) {
        align-items: start;
        display: flex;
      }

      @supports (display: grid) {
        grid-column-end: span 1;
        grid-column-start: auto;
        grid-row: 1 / 100;
      }
    }

    .l-fluid-breakout__aside {
      @extend %l-fluid-breakout__aside-common-properties;

      @media (min-width: $breakpoint-large) and (max-width: $l-fluid-breakout-3-col-threshold) {
        padding-right: map-get($grid-margin-widths, large);
      }

      @media (min-width: $l-fluid-breakout-3-col-threshold) {
        padding-left: map-get($grid-margin-widths, large);
        padding-right: 0;
      }

      justify-content: flex-end;
    }

    .l-fluid-breakout__aside--right {
      @media (min-width: $breakpoint-large) and (max-width: $l-fluid-breakout-3-col-threshold) {
        padding-left: map-get($grid-margin-widths, large);
      }

      @media (min-width: $l-fluid-breakout-3-col-threshold) {
        padding-right: map-get($grid-margin-widths, large);
      }

      @extend %l-fluid-breakout__aside-common-properties;
    }
  }
}
