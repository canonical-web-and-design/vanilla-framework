@mixin vf-b-row-reset {
  margin-left: 0;
  margin-right: 0;
  padding-left: 0;
  padding-right: 0;
}

@mixin vf-b-grid-definitions {
  %fixed-width-container--common-properties {
    @extend %vf-grid-container-padding;

    margin-left: auto;
    margin-right: auto;
    width: 100%;
  }

  %fixed-width-container {
    @extend %fixed-width-container--common-properties;

    max-width: $grid-max-width;
  }

  %fixed-width-container--16-col {
    @extend %fixed-width-container--common-properties;

    max-width: $grid-max-width--16-col;
  }

  %vf-row {
    @extend %fixed-width-container;

    // default to flexbox for IE on large screens
    // on small screens we let columns render one under another
    @media (min-width: $threshold-6-12-col) {
      display: flex;
    }

    & & {
      @include vf-b-row-reset;
    }

    @supports (display: grid) {
      display: grid;
      grid-template-rows: auto;
      margin-left: auto;
      margin-right: auto;
      max-width: $grid-max-width;

      [class*='#{$grid-column-prefix}'] {
        grid-column-start: auto;
      }

      // set static gutter width per breakpoint
      @media (max-width: $threshold-4-6-col) {
        grid-gap: 0 map-get($grid-gutter-widths, small);
        grid-template-columns: repeat($grid-columns-small, minmax(0, 1fr));

        & > * {
          grid-column-end: span $grid-columns-small;
        }
      }

      @media (min-width: $threshold-4-6-col) and (max-width: $threshold-6-12-col) {
        grid-gap: 0 map-get($grid-gutter-widths, medium);
        grid-template-columns: repeat($grid-columns-medium, minmax(0, 1fr));

        & > * {
          grid-column-end: span $grid-columns-medium;
        }
      }

      @media (min-width: $threshold-6-12-col) {
        grid-gap: 0 map-get($grid-gutter-widths, large);
        grid-template-columns: repeat($grid-columns, minmax(0, 1fr));

        & > * {
          grid-column-end: span $grid-columns;
        }
      }
    }
  }

  %vf-row--16-col {
    align-items: self-start;

    @media (min-width: $threshold-12-16-col) {
      grid-template-columns: repeat($grid-columns--16, minmax(0, 1fr));
      max-width: $grid-max-width--16-col;
    }
  }

  %vf-row-new {
    @media (min-width: $threshold-12-16-col) {
      align-items: self-start;
      display: grid;
      grid-gap: 0 0;
      grid-template-columns: [full-start] minmax(10rem, 1fr) [main-start] minmax(0, $grid-max-width) [main-end] minmax(10rem, 1fr) [full-end];
      margin-left: auto;
      margin-right: auto;
      max-width: 120rem;
    }
  }

  %vf-row-new__full {
    @media (max-width: $threshold-12-16-col) {
      & & {
        @include vf-b-row-reset;
      }

      @supports (display: grid) {
        display: grid;
        grid-template-rows: auto;
        margin-left: auto;
        margin-right: auto;
        max-width: $grid-max-width;

        [class*='#{$grid-column-prefix}'] {
          grid-column-start: auto;
        }
      }
    }

    // set static gutter width per breakpoint
    @media (max-width: $threshold-4-6-col) {
      @supports (display: grid) {
        display: grid;
        grid-gap: 0 map-get($grid-gutter-widths, small);
        grid-template-columns: repeat($grid-columns-small, minmax(0, 1fr));
        padding-left: map-get($grid-margin-widths, small);
        padding-right: map-get($grid-margin-widths, small);

        & > * {
          grid-column-end: span $grid-columns-small;
        }
      }
    }

    @media (min-width: $threshold-4-6-col) and (max-width: $threshold-6-12-col) {
      @supports (display: grid) {
        display: grid;
        grid-gap: 0 map-get($grid-gutter-widths, medium);
        grid-template-columns: repeat($grid-columns-medium, minmax(0, 1fr));
        padding-left: map-get($grid-margin-widths, medium);
        padding-right: map-get($grid-margin-widths, medium);

        & > * {
          grid-column-end: span $grid-columns-medium;
        }
      }
    }

    @media (min-width: $threshold-6-12-col) and (max-width: $threshold-12-16-col) {
      @supports (display: grid) {
        display: grid;
        grid-gap: 0 map-get($grid-gutter-widths, large);
        grid-template-columns: repeat($grid-columns, minmax(0, 1fr));
        padding-left: map-get($grid-margin-widths, large);
        padding-right: map-get($grid-margin-widths, large);

        & > * {
          grid-column-end: span $grid-columns;
        }
      }
    }

    @media (min-width: $threshold-12-16-col) {
      @supports (display: grid) {
        display: grid;
        grid-column: full;
        grid-gap: 0 0;
        grid-template-columns: inherit;
      }
    }
  }

  %vf-row-new__main {
    @supports (display: grid) {
      display: inherit;
      grid-column-start: auto;
      grid-gap: 0 map-get($grid-gutter-widths, large);
      grid-row-start: auto;

      @media (max-width: $threshold-4-6-col) {
        grid-column-end: span $aside-columns-small;
        grid-template-columns: repeat($grid-columns-small - $aside-columns-small, minmax(0, 1fr));
      }

      @media (min-width: $threshold-4-6-col) and (max-width: $threshold-6-12-col) {
        grid-column-end: span $grid-columns-medium - $aside-columns-medium;
        grid-template-columns: repeat($grid-columns-medium - $aside-columns-medium, minmax(0, 1fr));
      }

      @media (min-width: $threshold-6-12-col) and (max-width: $threshold-12-16-col) {
        grid-column-end: span $grid-columns - $aside-columns-large;
        grid-template-columns: repeat($grid-columns - $aside-columns-large, minmax(0, 1fr));
      }

      @media (min-width: $threshold-12-16-col) {
        grid-column: auto / span 2;
        grid-template-columns: repeat(auto-fit, minmax($main-items-width, 1fr));
        padding-left: map-get($grid-margin-widths, large);
        padding-right: map-get($grid-margin-widths, large);
      }
    }
  }

  %vf-row-new__aside-left {
    @supports (display: grid) {
      grid-column-start: auto;
      grid-row-start: auto;

      @media (max-width: $threshold-4-6-col) {
        grid-column-end: span $aside-columns-small;
      }

      @media (min-width: $threshold-4-6-col) and (max-width: $threshold-6-12-col) {
        grid-column-end: span $aside-columns-medium;
      }

      @media (min-width: $threshold-6-12-col) and (max-width: $threshold-12-16-col) {
        grid-column-end: span $aside-columns-large;
      }

      @media (min-width: $threshold-12-16-col) {
        display: grid;
        grid-column-end: span 1;
      }
    }
  }

  %vf-grid-container-padding {
    // set static outside padding per breakpoint
    @media (max-width: $threshold-4-6-col) {
      padding-left: map-get($grid-margin-widths, small);
      padding-right: map-get($grid-margin-widths, small);
    }

    @media (min-width: $threshold-4-6-col) and (max-width: $threshold-6-12-col) {
      padding-left: map-get($grid-margin-widths, medium);
      padding-right: map-get($grid-margin-widths, medium);
    }

    @media (min-width: $threshold-6-12-col) {
      padding-left: map-get($grid-margin-widths, large);
      padding-right: map-get($grid-margin-widths, large);
    }
  }
}

// flexbox approximation of grid column styles for IE
// this needs to be a @mixin rather than %placeholder because it's used inside @media queries
@mixin vf-grid-flex-column($size: 1) {
  flex-basis: 0;
  flex-grow: $size;
  flex-shrink: 1;

  // set static gutter width
  margin-left: map-get($grid-gutter-widths, large);

  &:first-child {
    margin-left: 0;
  }
}
